[
  {
    "sid": 1,
    "slug": "sum-of-two-numbers",
    "statement": "Given two integers A and B, compute their sum.",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    a, b = map(int, input().split())\n    # your code here\n",
        "boilerplate": "def solve():\n    a, b = map(int, input().split())\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "int solve(int a, int b) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << solve(a, b) << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n\nvoid solve() {\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n\nvoid solve() {\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n{user_code}\n}\n\nint main() {\n    solve();\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "1 2",
        "output": "3"
      },
      {
        "input": "5 7",
        "output": "12"
      },
      {
        "input": "-3 4",
        "output": "1"
      },
      {
        "input": "0 0",
        "output": "0"
      },
      {
        "input": "10 -5",
        "output": "5"
      }
    ]
  },
  {
    "sid": 2,
    "slug": "maximum-in-array",
    "statement": "Given an array of N integers, find the maximum value in the array.",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    # your code here\n",
        "boilerplate": "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> arr(n);\n    for (int i = 0; i < n; i++) cin >> arr[i];\n    // your code here\n}",
        "boilerplate": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> arr(n);\n    for (int i = 0; i < n; i++) cin >> arr[i];\n{user_code}\n}\n\nint main() {\n    solve();\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n\nvoid solve() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[n];\n    for (int i = 0; i < n; i++) scanf(\"%d\", &arr[i]);\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n\nvoid solve() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[n];\n    for (int i = 0; i < n; i++) scanf(\"%d\", &arr[i]);\n{user_code}\n}\n\nint main() {\n    solve();\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "5\n1 2 3 4 5",
        "output": "5"
      },
      {
        "input": "3\n-1 -5 -2",
        "output": "-1"
      },
      {
        "input": "4\n10 5 8 12",
        "output": "12"
      },
      {
        "input": "1\n7",
        "output": "7"
      },
      {
        "input": "6\n3 9 2 8 1 5",
        "output": "9"
      }
    ]
  },
  {
    "sid": 3,
    "slug": "factorial-calculation",
    "statement": "Calculate the factorial of a given non-negative integer N. The factorial of N (denoted as N!) is the product of all positive integers less than or equal to N.",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    n = int(input())\n    # your code here\n",
        "boilerplate": "def solve():\n    n = int(input())\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "int factorial(int n) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << factorial(n) << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n\nint factorial(int n) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n\n{user_code}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", factorial(n));\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "5",
        "output": "120"
      },
      {
        "input": "0",
        "output": "1"
      },
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "7",
        "output": "5040"
      },
      {
        "input": "10",
        "output": "3628800"
      }
    ]
  },
  {
    "sid": 4,
    "slug": "prime-number-check",
    "statement": "Given an integer N, determine if it is a prime number. A prime number is a natural number greater than 1 that is not divisible by any number other than 1 and itself. Print 'Yes' if the number is prime, otherwise print 'No'.",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    n = int(input())\n    # your code here\n",
        "boilerplate": "def solve():\n    n = int(input())\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "#include <iostream>\nusing namespace std;\n\nbool isPrime(int n) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    int n;\n    cin >> n;\n    if (isPrime(n)) cout << \"Yes\" << endl;\n    else cout << \"No\" << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n\nint isPrime(int n) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n\n{user_code}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    if (isPrime(n)) printf(\"Yes\\n\");\n    else printf(\"No\\n\");\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "7",
        "output": "Yes"
      },
      {
        "input": "15",
        "output": "No"
      },
      {
        "input": "23",
        "output": "Yes"
      },
      {
        "input": "1",
        "output": "No"
      },
      {
        "input": "4",
        "output": "No"
      }
    ]
  },
  {
    "sid": 5,
    "slug": "reverse-string",
    "statement": "Given a string S, print the string in reverse order.",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    s = input().strip()\n    # your code here\n",
        "boilerplate": "def solve():\n    s = input().strip()\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring reverseString(string s) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\n#include <string>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    string s;\n    getline(cin, s);\n    cout << reverseString(s) << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n#include <string.h>\n\nvoid reverseString(char* s) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n#include <string.h>\n\n{user_code}\n\nint main() {\n    char s[1000];\n    scanf(\"%[^\\n]\", s);\n    reverseString(s);\n    printf(\"%s\\n\", s);\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "hello",
        "output": "olleh"
      },
      {
        "input": "abcdef",
        "output": "fedcba"
      },
      {
        "input": "a",
        "output": "a"
      },
      {
        "input": "Programming",
        "output": "gnimmargorP"
      },
      {
        "input": "12345",
        "output": "54321"
      }
    ]
  },
  {
    "sid": 6,
    "slug": "fibonacci-sequence",
    "statement": "Generate the Nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, where each subsequent number is the sum of the two preceding ones (0, 1, 1, 2, 3, 5, 8, ...).",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    n = int(input())\n    # your code here\n",
        "boilerplate": "def solve():\n    n = int(input())\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "int fibonacci(int n) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << fibonacci(n) << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n\nint fibonacci(int n) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n\n{user_code}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", fibonacci(n));\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "0",
        "output": "0"
      },
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "5",
        "output": "5"
      },
      {
        "input": "10",
        "output": "55"
      },
      {
        "input": "15",
        "output": "610"
      }
    ]
  },
  {
    "sid": 7,
    "slug": "count-vowels",
    "statement": "Given a string S, count the number of vowels (a, e, i, o, u) in the string. The count should be case-insensitive (both uppercase and lowercase vowels should be counted).",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    s = input().strip()\n    # your code here\n",
        "boilerplate": "def solve():\n    s = input().strip()\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint countVowels(string s) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\n#include <string>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    string s;\n    getline(cin, s);\n    cout << countVowels(s) << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint countVowels(char* s) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n{user_code}\n\nint main() {\n    char s[1000];\n    scanf(\"%[^\\n]\", s);\n    printf(\"%d\\n\", countVowels(s));\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "Hello World",
        "output": "3"
      },
      {
        "input": "programming",
        "output": "3"
      },
      {
        "input": "aEiOu",
        "output": "5"
      },
      {
        "input": "xyz",
        "output": "0"
      },
      {
        "input": "Mathematics",
        "output": "4"
      }
    ]
  },
  {
    "sid": 8,
    "slug": "binary-to-decimal",
    "statement": "Convert a binary number represented as a string to its decimal equivalent.",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    binary = input().strip()\n    # your code here\n",
        "boilerplate": "def solve():\n    binary = input().strip()\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint binaryToDecimal(string binary) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\n#include <string>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    string binary;\n    cin >> binary;\n    cout << binaryToDecimal(binary) << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n#include <string.h>\n\nint binaryToDecimal(char* binary) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n#include <string.h>\n\n{user_code}\n\nint main() {\n    char binary[100];\n    scanf(\"%s\", binary);\n    printf(\"%d\\n\", binaryToDecimal(binary));\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "1010",
        "output": "10"
      },
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "101",
        "output": "5"
      },
      {
        "input": "11111",
        "output": "31"
      },
      {
        "input": "1000",
        "output": "8"
      }
    ]
  },
  {
    "sid": 9,
    "slug": "gcd-calculator",
    "statement": "Calculate the greatest common divisor (GCD) of two positive integers A and B.",
    "difficulty": "medium",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    a, b = map(int, input().split())\n    # your code here\n",
        "boilerplate": "def solve():\n    a, b = map(int, input().split())\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "int gcd(int a, int b) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << gcd(a, b) << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n\n{user_code}\n\nint main() {\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    printf(\"%d\\n\", gcd(a, b));\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "12 18",
        "output": "6"
      },
      {
        "input": "35 10",
        "output": "5"
      },
      {
        "input": "31 17",
        "output": "1"
      },
      {
        "input": "24 36",
        "output": "12"
      },
      {
        "input": "100 25",
        "output": "25"
      }
    ]
  },
  {
    "sid": 10,
    "slug": "palindrome-check",
    "statement": "Given a string S, determine if it is a palindrome. A palindrome is a string that reads the same backward as forward. Print 'Yes' if the string is a palindrome, otherwise print 'No'.",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    s = input().strip()\n    # your code here\n",
        "boilerplate": "def solve():\n    s = input().strip()\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(string s) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\n#include <string>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    string s;\n    cin >> s;\n    if (isPalindrome(s)) cout << \"Yes\" << endl;\n    else cout << \"No\" << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n#include <string.h>\n\nint isPalindrome(char* s) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n#include <string.h>\n\n{user_code}\n\nint main() {\n    char s[1000];\n    scanf(\"%s\", s);\n    if (isPalindrome(s)) printf(\"Yes\\n\");\n    else printf(\"No\\n\");\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "racecar",
        "output": "Yes"
      },
      {
        "input": "hello",
        "output": "No"
      },
      {
        "input": "level",
        "output": "Yes"
      },
      {
        "input": "a",
        "output": "Yes"
      },
      {
        "input": "abcba",
        "output": "Yes"
      }
    ]
  },
  {
    "sid": 11,
    "slug": "array-sum",
    "statement": "Given an array of N integers, calculate the sum of all elements in the array.",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    # your code here\n",
        "boilerplate": "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint arraySum(vector<int>& arr) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> arr(n);\n    for (int i = 0; i < n; i++) cin >> arr[i];\n    cout << arraySum(arr) << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n\nint arraySum(int arr[], int n) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n\n{user_code}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[n];\n    for (int i = 0; i < n; i++) scanf(\"%d\", &arr[i]);\n    printf(\"%d\\n\", arraySum(arr, n));\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "5\n1 2 3 4 5",
        "output": "15"
      },
      {
        "input": "3\n-1 0 1",
        "output": "0"
      },
      {
        "input": "4\n10 20 30 40",
        "output": "100"
      },
      {
        "input": "1\n5",
        "output": "5"
      },
      {
        "input": "6\n-5 -4 -3 -2 -1 0",
        "output": "-15"
      }
    ]
  },
  {
    "sid": 12,
    "slug": "average-of-array",
    "statement": "Given an array of N integers, calculate the average (mean) of all elements in the array. The result should be rounded to 2 decimal places.",
    "difficulty": "easy",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    # your code here\n",
        "boilerplate": "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "#include <iostream>\n#include <vector>\n#include <iomanip>\nusing namespace std;\n\ndouble average(vector<int>& arr) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\n#include <vector>\n#include <iomanip>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> arr(n);\n    for (int i = 0; i < n; i++) cin >> arr[i];\n    cout << fixed << setprecision(2) << average(arr) << endl;\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n\ndouble average(int arr[], int n) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n\n{user_code}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[n];\n    for (int i = 0; i < n; i++) scanf(\"%d\", &arr[i]);\n    printf(\"%.2f\\n\", average(arr, n));\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "5\n1 2 3 4 5",
        "output": "3.00"
      },
      {
        "input": "3\n10 20 30",
        "output": "20.00"
      },
      {
        "input": "4\n-2 -1 0 1",
        "output": "-0.50"
      },
      {
        "input": "1\n7",
        "output": "7.00"
      },
      {
        "input": "6\n1 1 1 1 1 1",
        "output": "1.00"
      }
    ]
  },
  {
    "sid": 13,
    "slug": "matrix-addition",
    "statement": "Given two matrices A and B of size N x M, compute their sum C = A + B.",
    "difficulty": "medium",
    "functionTemplates": {
      "python": {
        "default": "def solve():\n    n, m = map(int, input().split())\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int, input().split())))\n    for i in range(n):\n        B.append(list(map(int, input().split())))\n    # your code here\n",
        "boilerplate": "def solve():\n    n, m = map(int, input().split())\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int, input().split())))\n    for i in range(n):\n        B.append(list(map(int, input().split())))\n{user_code}\n\nsolve()"
      },
      "cpp": {
        "default": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<vector<int>> matrixAddition(vector<vector<int>>& A, vector<vector<int>>& B, int n, int m) {\n    // your code here\n}",
        "boilerplate": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n{user_code}\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    vector<vector<int>> A(n, vector<int>(m));\n    vector<vector<int>> B(n, vector<int>(m));\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            cin >> A[i][j];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            cin >> B[i][j];\n    vector<vector<int>> C = matrixAddition(A, B, n, m);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            cout << C[i][j];\n            if (j < m - 1) cout << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}"
      },
      "c": {
        "default": "#include <stdio.h>\n\nvoid matrixAddition(int A[][100], int B[][100], int C[][100], int n, int m) {\n    // your code here\n}",
        "boilerplate": "#include <stdio.h>\n\n{user_code}\n\nint main() {\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    int A[100][100], B[100][100], C[100][100];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            scanf(\"%d\", &A[i][j]);\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            scanf(\"%d\", &B[i][j]);\n    matrixAddition(A, B, C, n, m);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            printf(\"%d\", C[i][j]);\n            if (j < m - 1) printf(\" \");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"
      }
    },
    "test_cases": [
      {
        "input": "2 2\n1 2\n3 4\n5 6\n7 8",
        "output": "6 8\n10 12"
      },
      {
        "input": "1 3\n1 2 3\n4 5 6",
        "output": "5 7 9"
      },
      {
        "input": "3 1\n1\n2\n3\n4\n5\n6",
        "output": "5\n7\n9"
      },
      {
        "input": "2 3\n1 2 3\n4 5 6\n0 0 0\n0 0 0",
        "output": "1 2 3\n4 5 6"
      },
      {
        "input": "3 3\n1 1 1\n1 1 1\n1 1 1",
        "output": "2 2 2\n2 2 2\n2 2 2"
      }
    ]
  }
]